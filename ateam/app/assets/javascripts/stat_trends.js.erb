

function initialize_trends_chart(){
  data = gon.team_points;
  curr_stat = {"stat_id": 15, "stat_name" : "Points", "is_advanced" : false}

  var margin = {top: window.innerWidth * .0078, right: window.innerWidth * .039, bottom: window.innerWidth * .059, left: window.innerWidth * .059};
  var width = window.innerWidth * 0.87 - margin.left - margin.right;
  var portrait = window.matchMedia( "(orientation : portrait)" );
  if(portrait.matches){
    var height = width - margin.top - margin.bottom
  }
  else{
    var height = width * 0.55 - margin.top - margin.bottom;
  }
  
  trends_chart =  new TrendChart("#trends-chart", data, "#349dff", "Points", gon.team_name, width, height, margin)
  trends_chart.createChart()
  console.log(trends_chart.data)
}



function init_trend_display_stats(){
  team_adv_display_stats = gon.team_adv_stat_table_columns
  team_adv_display_stats = jQuery.grep(team_adv_display_stats, function(n) {
    return !n.is_opponent;
  });

  off_display_stats = gon.off_stat_lists

  def_display_stats = gon.def_stat_lists

  adv_display_stats = gon.adv_stat_table_columns;

}

  function insert_team_trends_advanced_links(){
    var adv_len = team_adv_display_stats.length;
    for (var i = 0; i < adv_len; i++){
      var link_string = team_adv_display_stats[i].display_name;
      var advanced_link = "<option class='flex-row toolbar-dropdown-button' data-is-advanced = 'true'  value = '"+ team_adv_display_stats[i].stat_list_id+"'>"+link_string+"</option>"
      $("#trend-team-stats").append(advanced_link)
    }
  }

  function insert_player_trends_advanced_links(){
    var adv_len = adv_display_stats.length;
    var advanced_links;

    for (var i = 0; i < adv_len; i++){
      var link_string = adv_display_stats[i].display_name;
      var advanced_link = "<option class='flex-row toolbar-dropdown-button' data-is-advanced = 'true'  value = '"+ adv_display_stats[i].stat_list_id+"'>"+link_string+"</option>"
      $("#trend-player-stats").append(advanced_link)
    }
    
  }

  function insert_trends_offensive_links(){
    var off_len = off_display_stats.length

    for (var i =0; i<off_len; i++){
      var link_string = off_display_stats[i].stat;
      var off_link = "<option class='flex-row toolbar-dropdown-button' data-is-advanced = 'false'  value = '"+ off_display_stats[i].stat_list_id+"'>"+link_string+"</option>"
      $("#trend-player-stats").append(off_link)
      $("#trend-team-stats").append(off_link)
    }
  }

  function insert_trends_defensive_links(){
    var def_len = def_display_stats.length

    for (var i =0; i<def_len; i++){

      var link_string = def_display_stats[i].stat;
      var def_link = "<option class='flex-row toolbar-dropdown-button'  data-is-advanced = 'false' value = '"+ def_display_stats[i].stat_list_id+"'>"+link_string+"</option>"
      $("#trend-player-stats").append(def_link)
      $("#trend-team-stats").append(def_link)

    }

  }

  function insert_trends_order_links(){
    insert_team_trends_advanced_links()
    insert_player_trends_advanced_links()
    insert_trends_offensive_links()
    insert_trends_defensive_links()
  }

 

  function is_off_player_stat(stat){
    var len = off_display_stats.length;
    for(var i = 0; i < len; i++){
      if(stat == off_display_stats[i].stat_list_id) return true;
    }
    return false;
  }

  function is_def_player_stat(stat){
    var len = def_display_stats.length;
    for(var i = 0; i < len; i++){
      if(stat == def_display_stats[i].stat_list_id) return true;
    }
    return false;
  }

  function is_adv_player_stat(stat){
    var len = adv_display_stats.length;
    for(var i = 0; i < len; i++){
      console.log("stat input: " + stat)
      console.log("compare stat: " + adv_display_stats[i].stat_list_id)
      if(stat == adv_display_stats[i].stat_list_id) return true;
    }
    return false;
  }

  function is_adv_team_stat(stat){
    var len = team_adv_display_stats.length;
    for(var i = 0; i < len; i++){
      if(stat == team_adv_display_stats[i].stat_list_id) return true;
    }
  }

  function is_player_stat(stat){
    if(is_off_player_stat(stat)){
      return true;
    }
    else if(is_def_player_stat(stat)){
      return true;
    }
    else if (is_adv_player_stat(stat)){
      console.log("returning true")
      return true;
    }
    else return false;
  }

  function is_team_stat(stat){
    if(is_off_player_stat(stat)){
      return true;
    }
    else if (is_def_player_stat(stat)){
      return true
    }
    else if(is_adv_team_stat(stat)){
      return true;
    }
    else return false;
  }

  function team_trend_button(player_id){
    if(player_id){
      player_trend_button(player_id)
    }
    else{
      $("#trend-player-stats-wrapper").hide()
      $("#trend-team-stats-wrapper").show()

      curr_player = null;
      if(!team_trend){
        if(!is_team_stat(curr_stat.stat_id)){
          curr_stat = {"stat_id": 15, "stat_name" : "Points", "is_advanced" : false}
        }
      }
      team_is_opponent = is_opponent
      team_trend = true;
      get_trend_data(true)
    }  
  }

  function player_trend_button(player){
    $("#trend-team-stats-wrapper").hide()
    $("#trend-player-stats-wrapper").show()

    curr_player = player;
    if(team_trend){
      if(!is_player_stat(curr_stat.stat_id)){
        console.log("setting to player points")
        curr_stat = {"stat_id": 15, "stat_name" : "Points", "is_advanced" : false}
      }
    }
    team_trend = false;
    get_trend_data(true)
    
  }

  function stat_trend_button(stat, button){
    console.log("data set")
    console.log(button.options[button.selectedIndex].dataset)
    curr_stat = {"stat_id": stat, "stat_name" : button.options[button.selectedIndex].text,  "is_advanced" : button.options[button.selectedIndex].dataset.isAdvanced}
    console.log("curr_stat")
    console.log(curr_stat)
    get_trend_data(false)
  }

  function set_curr_stat(stat_id){

  }

  function update_trend_chart(result, is_player){
    if(is_player){
      if(is_player_stat(curr_stat.stat_id)){
        $("#trend-player-stat-current").text(curr_stat.stat_name)
      }
      else{
        $("#trend-team-stat-current").text(curr_stat.stat_name)
      }
    }
    else{
      if(team_trend){
        $("#trend-team-stat-current").text(curr_stat.stat_name)
      }
      else{
        console.log("changing player stat")
        $("#trend-player-stat-current").text(curr_stat.stat_name)
      }
      
    }
    trends_chart.setData(result.stats)
    trends_chart.setYAxis(curr_stat.stat_name)
    trends_chart.createChart()
  }



  function get_trend_data(is_player){
    var create_url = "/teams/" + gon.team_id +"/seasons/"+gon.season_id+"/stats/trend_data";
    if(team_trend){
      var data  = {is_opponent: team_is_opponent, is_team: true, stat: curr_stat, season_id: gon.season_id}
    }
    else{
      var data = {player_id: curr_player, is_team: false, stat: curr_stat, season_id: gon.season_id}
    }
    
    $.ajax({
       url: create_url,
       beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
       method: "get",
       data_type: 'json',
       data: data,
       success: function(result){
        console.log(result)
        update_trend_chart(result, is_player)
       }

      });
  }





function find_trend_index(trend_array, stat_list_id){
  var len = trend_array.length;
  for (var i = 0; i < len; i++){
    if(trend_array[i].stat_list_id == stat_list_id){
      return i;
    }
  }
}









function TrendChart(id, data, color, y_axis_label, player, width, height, margin){
  this.id = id;
  this.data = data;
  this.color = color;
  this.y_axis_label = y_axis_label;
  this.player = player;
  this.width = Math.max(this.data.length * window.innerWidth * .05125, width);
  this.height = height;
  this.margin = margin;

  this.setData = function(data){
    this.data = data;
  }
  this.setYAxis = function(label){
    this.y_axis_label = label
  }

  this.createChart = function(){
    width = this.width

    var maxValue = d3.max(this.data, function(i){return i.value;});

    var n = this.data.length

    // 5. X scale will use the index of our this.data
    var xScale = d3.scaleBand().rangeRound([0, width]).padding(1);

    // 6. Y scale will use the randomly generate number 
    var yScale = d3.scaleLinear()
        .domain([0, maxValue * 1.25]) // input 
        .range([height, 0]); // output 

    // 7. d3's line generator
    var line = d3.line()
      .x(function(d) { return xScale(parseDate(d.date, d.opponent_name)); }) // set the x values for the line generator
      .y(function(d) { return yScale(d.value); }) // set the y values for the line generator 
      .curve(d3.curveMonotoneX) // apply smoothing to the line

    xScale.domain(this.data.map(function(d) { return parseDate(d.date, d.opponent_name) }));

    d3.select(this.id).select("svg").remove();

      // 1. Add the SVG to the page and employ #2
    var svg = d3.select(this.id).append("svg")
        .attr("width", this.width + this.margin.left + this.margin.right)
        .attr("height", this.height + this.margin.top + this.margin.bottom)
        .style("height", this.height + this.margin.top + this.margin.bottom)
      .append("g")
        .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");

    // 3. Call the x axis in a group tag
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + this.height + ")")
        .call(d3.axisBottom(xScale))
        .selectAll("text")
        .attr("class", "trend-axis-text")    
        .attr("transform", "rotate(30)")
        .attr("y", window.innerWidth * .01176)
        .attr("x", window.innerWidth * .02734); // Create an axis component with d3.axisBottom

      // X axis label == date
    svg.append("text")
        .attr("class", "trend-axis-label")           
        .attr("transform",
              "translate(" + (this.width/2) + " ," + 
                             (this.height + 70) + ")")
        .style("text-anchor", "middle")
        .text("Date");

    // 4. Call the y axis in a group tag
    svg.append("g")
        .attr("class", "y axis")
        .attr("id", "trend-y-axis")
        .call(d3.axisLeft(yScale)) // Create an axis component with d3.axisLeft
        .selectAll("text")
        .attr("class", "trend-axis-text");    

      // text label for the y axis
    svg.append("text")
        .attr("class", "trend-axis-label")
        .attr("id", "trend-y-axis-label")
        .attr("transform", "rotate(-90)")
        .attr("fill", "white")
        .style("font-size", "14px")
        .attr("y", -60)
        .attr("x",0 - (this.height / 2))
        .attr("dy", "1em")
        .style("text-anchor", "middle")
        .text(this.y_axis_label);   


    // 9. Append the path, bind the this.data, and call the line generator 
    svg.append("path")
        .datum(this.data) // 10. Binds this.data to the line 
        .attr("stroke", this.color)
        .attr("class", "line") // Assign a class for styling 
        .attr("d", line); // 11. Calls the line generator 

    // 12. Appends a circle for each this.datapoint 
    svg.selectAll(".dot")
        .data(this.data)
      .enter().append("circle") // Uses the enter().append() method
        .attr("class", "dot") // Assign a class for styling
        .style("fill", this.color)
        .attr("cx", function(d) { return xScale(parseDate(d.date, d.opponent_name)) })
        .attr("cy", function(d) { return yScale(d.value) })
        .attr("r", 5)
          .on("mouseover", function(a, b, c) { 
            console.log(a) 
            //this.attr('class', 'focus')
        })
          .on("mouseout", function() {  })
  };

}

function parseDate(date, opponent_name){
  var split_date = date.split("-")
  var return_date = opponent_name + " (" + split_date[1]+"/" + split_date[2] + ")"
  return return_date
}




