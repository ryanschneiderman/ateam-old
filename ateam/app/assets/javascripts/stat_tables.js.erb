	
	function populate_display_stats_basic(stat_table_columns){
		display_stats = stat_table_columns
		display_stats.sort(function(a,b) { return a.display_priority - b.display_priority});
	}

	function populate_display_stats_adv(stat_table_columns){
		display_stats_adv = stat_table_columns
		display_stats_adv.sort(function(a,b) {return a.display_priority - b.display_priority});
	}


	function populate_team_display_stats_adv(stat_table_columns){
		display_stats_team_adv = stat_table_columns
	}

	function populate_stat_array(player_stats_param, advanced_stats_param){

		player_stats = player_stats_param
		advanced_stats = advanced_stats_param
	}

	function init_sort_stat_array(){
		player_stats.sort(function(a,b){return b.minutes - a.minutes})
		advanced_stats.sort(function(a,b){return b.minutes - a.minutes})
	}

	function add_minutes_to_game_index_stats(){
		var len = player_stats.length
		for(var i = 0; i < len; i++){
			var inner_len = player_stats[i].stats.length;
			for(var j = 0; j < inner_len; j++){
				if(player_stats[i].stats[j].stat_list_id == 16){
					player_stats[i].minutes = player_stats[i].stats[j].value
				}
			}
		}
	}

	function populate_team_stats(team_stats_param){
		team_stats = team_stats_param
	}

	function populate_opponent_stats(opponent_stats_param){
		opponent_stats = opponent_stats_param
	}

	function populate_team_advanced_stats(team_advanced){
		team_advanced_stats = team_advanced
	}


	function populate_stat_tables(is_stat_index, single_game, advanced){
		populate_player_stat_tables(is_stat_index, single_game, advanced);
	}

	function populate_team_adv_stat_tables(opponent){
		populate_team_adv_stat_header(adv_stats_team_table);
		var team_advanced_row = adv_stats_team_table.insertRow(2)
		populate_team_advanced_row(team_advanced_row, 2)
	}


	function populate_team_stat_tables(opponent, per_game){
		populate_basic_team_stat_header(team_stats_table);
		var team_row = team_stats_table.insertRow(1);
		team_row.classList.add("team-table-row1");
		team_row.classList.add("team-table-row")
		populate_basic_row(team_row, 1, false, team_stats, per_game);
		if(opponent){
			var opponent_row = team_stats_table.insertRow(2);
			opponent_row.classList.add("team-table-row0")
			opponent_row.classList.add("team-table-row")
			populate_basic_row(opponent_row, 2, false, opponent_stats, per_game);
		}
		
	}


	function populate_player_stat_tables(is_stat_index, single_game, advanced){
		console.log("advanced_stats")
		console.log(advanced_stats)
		if(single_game){
			populate_basic_player_stat_header(per_game_table, false, false);	
			populate_basic_player_stat_header(per_minute_table, false, true);
		}
		else{
			populate_basic_player_stat_header(per_game_table, true, false);	
			populate_basic_player_stat_header(per_minute_table, false, true);
		}
		
		if (advanced) populate_adv_stat_header(adv_stats_player_table, "adv_stats_player_table");

		var num_players = player_stats.length
		var i = 1;
		for(i; i < num_players +1; i++){
			var per_game_row = per_game_table.insertRow(i);
			var per_minute_row = per_minute_table.insertRow(i)
			per_game_row.classList.add("team-table-row"+i%2)
			per_game_row.classList.add("team-table-row")
			per_minute_row.classList.add("team-table-row"+i%2)
			per_minute_row.classList.add("team-table-row")
			if (advanced){
				var advanced_row = adv_stats_player_table.insertRow(i)
				advanced_row.classList.add("team-table-row"+i%2)
				advanced_row.classList.add("team-table-row")
				populate_advanced_row(advanced_row, i);
			}
			// TODO: this is where we will add an extra boolean to account for extra case !!!
			populate_basic_row(per_game_row, i, true, null, !single_game, false);	
			populate_basic_row(per_minute_row, i, true, null, false, true);	
			
		}
	}


	function populate_team_advanced_row(row, i){
		var num_stats = display_stats_team_adv.length
		for(j = 0 ;j < num_stats + 1; j++){
			var col = row.insertCell(j);
			if (j == 0 && i > 0){
				column_header = gon.team_name;
				col.innerHTML += "<div>" + column_header + "</div>";
			}
			else if (i > 0 && j > 0){
				insert_team_adv_data(col, display_stats_team_adv[j - 1])
			}
		}
	}


	function populate_advanced_row(row, i){
		var num_stats = display_stats_adv.length
		var player = advanced_stats[i-1];
		if(advanced_stats[i-1]){
			for(j = 0 ;j < num_stats + 1; j++){
				if(row.cells.length <= j){
					var col = row.insertCell(j);
				}
				else var col = row.cells[j];
				if (j == 0 && i > 0){
					console.log(advanced_stats[i-1])
					col.innerHTML = "<div class = 'player-col'>" + advanced_stats[i-1].nickname + "</div>";
				}
				else if (i > 0 && j > 0){
					standard_table_data(col, display_stats_adv[j - 1].stat_list_id, player.stats, player, true, true, null, null)
				}
			}
		}

	}



	function populate_basic_row(row, i, is_player, team, is_per_game, is_per_minute){
		var insert_index = 0;
		var num_stats = (is_player) ? display_stats.length : display_stats.length - 1
		var player = (is_player) ? player_stats[i-1] : null;
		var stat_array = (is_player) ? player_stats[i-1].stats : team;

		for(j = 0 ;j < num_stats + 1; j++){
			if(row.cells.length <= insert_index){
				var col = row.insertCell(insert_index);
			}
			else 
				var col = row.cells[insert_index];

			if (j == 0 && i > 0){
				if(is_player){
					column_header = player_stats[i-1].nickname;
				}else{
					if(team[0].is_opponent){
						column_header = "Opponents"
					}
					else{
						column_header = gon.team_name
					}
					
				}
				col.innerHTML = "<div class = 'player-col'>" + column_header + "</div>";
			}
			else if (i > 0 && j > 0){
				if(display_stats[j-1].display_type == "fraction"){
					var pct = insert_fraction_data(row, col, display_stats[j - 1].stat_list_id, ++insert_index, stat_array, player, is_player, is_per_game, is_per_minute);
					insert_percentage_data(row, pct, insert_index)
				}
				else if (display_stats[j-1].display_type == "minutes"){
					if(is_player)insert_minutes_data(col, display_stats[j - 1].stat_list_id, stat_array, player, is_player, is_per_game, is_per_minute);
				}
				else{
					standard_table_data(col, display_stats[j - 1].stat_list_id, stat_array, player, is_player, false, is_per_game, is_per_minute)
				}
			}
			insert_index++;
		}
		return row;
	}


	function insert_team_adv_data(col, display_stat){
		var len = team_advanced_stats.length
		for(var i = 0; i < len; i++){
			if (display_stat.stat_list_id == team_advanced_stats[i].stat_list_id)
				if(display_stat.is_opponent == team_advanced_stats[i].is_opponent)
					col.innerHTML = team_advanced_stats[i].value.toFixed(1)
		}
	}

	function standard_table_data(col, stat_list_id, stat_array, player, is_player, is_advanced, is_per_game, is_per_minute){
		var stat =  find_player_stat(stat_list_id, stat_array)
		stat = get_adjusted_stat_value(stat, player, is_player, is_advanced, is_per_game, is_per_minute)
		insert_standard_data(col, stat)
	}

	function insert_standard_data(col, stat){
		col.innerHTML = stat;
	}

	function get_adjusted_stat_value(stat, player, is_player, is_advanced, is_per_game, is_per_minute){
		if(!is_advanced && is_player){
			if (is_per_game) {
				if (player.games_played == 0){
					stat = "--";
				}
				else{
					stat = (stat / player.games_played).toFixed(1)
				}

			}
			else if (is_per_minute) {
				if (player.minutes == 0){
					stat = "--"
				}
				else{
					stat = (minutes_factor * stat / (player.minutes / 60)).toFixed(1)
				}
			}
		}
		else if (is_player){
			if(player.minutes == 0 || player.games == 0){
				stat = "--"
			}
			else{
				stat = parseFloat(stat).toFixed(1);
			}
		}
		// Team Case
		else {
			if(is_per_game){
				stat = (stat / total_games).toFixed(1)
			}
		}
		return stat;
	}


	function insert_fraction_data(row, col, stat_list_id, index, stat_arr, player, is_player, is_per_game, is_per_minute, is_lineup,){
		
		var makes =  find_player_stat(stat_list_id, stat_arr)
		var misses = find_player_stat(stat_list_id + 1, stat_arr)
		var pct;

		var adj_makes = get_adjusted_stat_value(makes, player, is_player, false, is_per_game, is_per_minute)
		var att = get_adjusted_stat_value(misses + makes, player, is_player, false, is_per_game, is_per_minute)

		col.innerHTML = adj_makes + "/" + att;

		if(att!=0){
			pct = Math.round(adj_makes / att * 100)
		}
		else pct = 0;

		return pct;
	}
	
	

	function insert_minutes_data(col, stat_list_id, stat_array, player, is_player, is_per_game, is_per_minute){
		var stat = find_player_stat(stat_list_id, stat_array);
		var player_minutes;
		var player_seconds;
		var seconds_str;
		if(is_per_game) {
			stat = stat/player.games_played;
			player_minutes = Math.floor(stat / 60)
			player_seconds = (stat - player_minutes * 60).toFixed(1);
		}
		else if (is_per_minute){
			player_minutes = minutes_factor;
			player_seconds = 0;
		}
		else {
			player_minutes = Math.floor(stat / 60)
			player_seconds = (stat - player_minutes * 60)
		}

		(player_seconds < 10) ? seconds_str = "0" + player_seconds.toString() : seconds_str = player_seconds.toString();
		if(isNaN(player_minutes) || isNaN(player_seconds)){
			col.innerHTML = "--:--"
		}
		else{
			col.innerHTML = player_minutes.toString() + ":" + seconds_str
		}
		
	}


	function insert_percentage_data(row, pct, index){
		if (row.cells.length <= index){
			var pct_col = row.insertCell(index)
		}
		else var pct_col = row.cells[index];
		if(isNaN(pct)){
			pct_col.innerHTML = "--"
		}
		else{
			pct_col.innerHTML = (pct != 0) ? pct + "%" : "0%"  
		}
	}


	// TODO: minutes should only be per game in a per game case
	function sort_basic_table(display_priority, is_per_game, is_per_minute){
		console.log("display_priority in sort: " + display_priority)
		console.log(player_stats)
		var sort_index = find_player_stat_index(display_priority, player_stats[0].stats)
		console.log("sort_index: " + sort_index)
		if(is_per_game){
			player_stats.sort(function(a, b){
				return (b.stats[sort_index].value/b.games_played) - (a.stats[sort_index].value/a.games_played)
			});
			rerender_basic_table(per_game_table, is_per_game, is_per_minute);
		}
		else if (is_per_minute){
			player_stats.sort(function(a, b){
				if (display_priority == 17){
					return (b.stats[sort_index].value) -  (a.stats[sort_index].value)
				}
				else {
					return (b.stats[sort_index].value / b.minutes) -  (a.stats[sort_index].value / a.minutes)
				}
			});
			rerender_basic_table(per_minute_table, is_per_game, is_per_minute);
		}
		else {
			player_stats.sort(function(a, b){
				return (b.stats[sort_index].value) -  (a.stats[sort_index].value)
			});
			rerender_basic_table(per_game_table, is_per_game, is_per_minute);
		}
	}

	function sort_advanced_table(display_priority){
		var sort_index = find_player_stat_index(display_priority, advanced_stats[0].stats)
		advanced_stats.sort(function(a,b){
			var return_val;
			console.log(b.minutes)
			if(a.minutes == 0){
				return_val = 1
			}
			else return_val = (b.stats[sort_index].value) - (a.stats[sort_index].value)
			return return_val
		})
		rerender_adv_table(adv_stats_player_table);
	}

	function rerender_basic_table(table, is_per_game, is_per_minute){
		var num_rows = table.rows.length
		for(var i = 1; i < num_rows; i++){
			populate_basic_row(table.rows[i], i, true, null, is_per_game, is_per_minute)
		}
	}

	function rerender_adv_table(table){
		var num_rows = table.rows.length
		for(var i = 1; i < num_rows; i++){
			populate_advanced_row(table.rows[i], i)
		}
	}





	function populate_basic_player_stat_header(table, is_per_game, is_per_minute){
		var insert_index = 0;
		var row = table.insertRow(0)
		row.classList.add("team-table-header")
		var num_stats = display_stats.length
		for(i = 0; i < num_stats + 1; i++){
			var col = row.insertCell(insert_index)
			if (i > 0) {
				col.innerHTML += "<button class = 'stat-table-button' onclick='sort_basic_table(" + display_stats[i-1].display_priority + "," + is_per_game +  "," + is_per_minute + ")'>" + display_stats[i - 1].stat_name + "</button>";
				if(display_stats[i - 1].display_type == "fraction"){
					insert_index++;
					var pct_col = row.insertCell(insert_index);
					pct_col.innerHTML = "<div>" + display_stats[i - 1].percentage_string + "</div>"; 
				}
			}
			insert_index++;
		}
	}

	function populate_basic_team_stat_header(table, table_name){
		var insert_index = 0;
		var row = table.insertRow(0)
		row.classList.add("team-table-header");
		var num_stats = display_stats.length
		for(i = 0; i < num_stats; i++){
			var col = row.insertCell(insert_index)
			if (i > 0) {
				if(display_stats[i-1].stat_list_id != 16) col.innerHTML += "<div>" + display_stats[i - 1].stat_name + "</div>";
				if(display_stats[i - 1].display_type == "fraction"){
					insert_index++;
					var pct_col = row.insertCell(insert_index);
					pct_col.innerHTML = "<div>" + display_stats[i - 1].percentage_string + "</div>"; 
				}
			}
			insert_index++;
		}
	}

	function show_info(button){
		var parent = $(button).parent()
		var tooltip = parent.find(".tooltiptext")
		var position = parent.offset()
		tooltip.offset({top: position.top -55, left: position.left -58})
	}

	function show_more_info(button){
		var parent = $(button).parent()
		var description = parent.find(".stat-description")

		description.show()
		$(button).hide()
	}

	function hide_info(button){
		$(".stat-description").hide()
		$(".stat-info-show").show()
	}

	function populate_adv_stat_header(table){
		var row = table.insertRow(0)
		row.classList.add("team-table-header")
		var num_stats = display_stats_adv.length
		for(i = 0; i < num_stats + 1; i++){
			var col = row.insertCell(i)
			if (i > 0) {
				var description =  display_stats_adv[i-1].stat_description.replace(/&lt;/g,"<").replace(/&gt;/g,">");
				
				$(col).html("<div class = 'stat-table-header'><button class = 'stat-table-button' onmouseover = 'show_info(this)' onmouseout = 'hide_info(this)' onclick='sort_advanced_table(" + display_stats_adv[i-1].display_priority +")'>" + display_stats_adv[i-1].display_name+ "</button> <div class = 'tooltiptext'> <div class = 'stat-name stat-info-show'>" + display_stats_adv[i-1].stat_name + "</div> <button class = 'stat-info-show' onclick = 'show_more_info(this)'> See More Info</button> <div class = 'stat-description'>" + description + " </div> </div> </div>")
			}
		}
	}

	function populate_team_adv_stat_header(table){
		var meta_row = table.insertRow(0)
		var stat_row = table.insertRow(1)

		var blank_cell = meta_row.insertCell(0)
		var offense_four_factors = meta_row.insertCell(1)
		offense_four_factors.colSpan = "4";
		offense_four_factors.innerHTML = "Offense Four Factors"

		var defense_four_factors = meta_row.insertCell(2)
		defense_four_factors.colSpan = "4";
		defense_four_factors.innerHTML = "Defense Four Factors"

		var other_advanced = meta_row.insertCell(3)
		other_advanced.colSpan = "5";
		other_advanced.innerHTML = "Other Advanced"

		var num_stats = display_stats_team_adv.length
		for(i = 0; i < num_stats + 1; i++){
			var col = stat_row.insertCell(i)
			if (i > 0) {
				col.innerHTML += "<div>" + display_stats_team_adv[i - 1].display_name+ "</div>";
			}
		}
	}


	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/
	/****************************************************************** </CHANGERS> ***************************************************************/
	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/




	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/
	/****************************************************************** <FINDERS> *****************************************************************/
	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/

	function find_header_index(display_priority, arr){
		var len = arr.length
		for(var i = 0; i < len; i++){
			if (parseInt(arr[i].display_priority) == display_priority){
				return i;
			}
		}
	}

	function find_player_stat_index(display_priority, arr){
		var len = arr.length
		for(var i = 0; i < len; i++){
			if (parseInt(arr[i].display_priority) == display_priority){
				return i;
			}
		}
	}

	function find_player_stat(stat_list_id, arr){
		var len = arr.length
		for(var i = 0; i < len; i++){
			if(arr[i].stat_list_id == stat_list_id){
				return arr[i].value;
			}
		}
	}


	function toggle_player_table(type){
		switch(type){
			case "per_game" :
				$("#per-game-table").show()
				$("#per-minute-table").hide();
				$("#adv-player-stats-table").hide()
				break;
			case "advanced" :
				$("#per-game-table").hide()
				$("#per-minute-table").hide();
				$("#adv-player-stats-table").show()
				break;
			case "per_minute":
				$("#per-game-table").hide()
				$("#per-minute-table").show();
				$("#adv-player-stats-table").hide()
				break;
		}
	}

	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/
	/****************************************************************** </FINDERS> ****************************************************************/
	/**********************************************************************************************************************************************/
	/**********************************************************************************************************************************************/








